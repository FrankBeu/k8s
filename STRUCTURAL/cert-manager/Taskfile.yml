###
##
# * TASKFILE
##  https://taskfile.dev
###
version: '3'

vars:

  name:                     cert-manager

  nameSpace:                "{{.name}}"

  domainName:               "{{.name}}.thesym.site"

  chartRepoUrl:             https://charts.jetstack.io 
  chartRepoName:            jetstack 
  chartName:                "{{.name}}"
  
  labelTier:                security

  
  hostAcmeEmail:            "fbeutelschiess@gmail.com"


  templateDebugTarget:       "ingress"


  message:                   Tasks for {{.name}}{{if .chartName}}-helm{{end}}

  # chartVariablesSet: |- 
  #   --set installCRDs=true

  # --set hostnames="{"{{.domainName}}"}" \
  # --set domain="{{.superDomainName}}" \
  # --set initialAccout.username=mailadmin \

tasks:

  taskDebug:
    desc: show all variables in Taskfile
    cmds:
      - |
        echo -e \
        "\n{{range $key, $value := .}} {{$key }}:  \e[92m{{$value}}\e[0m\n {{end}}\n"
    silent: true


  default:
    desc: display info
    cmds:
      - |
        echo -e \
        "\n{{.message}}\n"
      - |
        task -l
    silent: true


###
##
# ** SEQUENCE
##
###
  1:
    desc: ( repoAdd )
    cmds:
      - task: repoAdd
    silent: true


  2:
    desc: ( chartGet )
    cmds:
      - task: chartGet
    silent: true


  3:
    desc: ( namespaceCreate )
    cmds:
      - task: namespaceCreate
    silent: true


  4:
    desc: ( crdInstall )
    cmds:
      - task: crdInstall
    silent: true


  5:
    desc: ( chartInstall )
    cmds:
      - task: chartInstall
    silent: true


  6:
    desc: ( installationTest )
    cmds:
      - task: installationTest
    silent: true


  7:
    desc: ( clusterIssuerApply )
    cmds:
      - task: clusterIssuerApply
    silent: true


  8:
    desc: ( chartRemove )
    cmds:
      - task: chartRemove
    silent: true


###
##
# ** ALPHABETICAL
##
###
  chartDebug:
    desc: debug chart
    cmds:
      - |
        helm install \
        --namespace {{.nameSpace}} \
        --dry-run \
        --debug \
        {{.chartName}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true


  chartGet:
    desc: download the chart
    cmds:
      - |
        helm pull \
        {{.chartRepoName}}/{{.chartName}} \
        -d CHART \
        --untar
    silent: true


  chartInstall:
    desc: install chart
    cmds:
      - |
        helm install \
        --namespace {{.nameSpace}} \
        {{.chartName}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true


  chartUpdate:
    desc: update chart
    cmds:
      - |
        helm upgrade \
        --namespace {{.nameSpace}} \
        {{.chartName}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true


  chartRemove:
    desc: (chartUninstall + namespaceDelete + crdDelete )
    cmds:
      - task: chartUninstall
      - task: namespaceDelete
      - task: crdDelete
    silent: true


  chartUninstall:
    desc: uninstall the {{.chartName}}-chart
    cmds:
      - |
        helm --namespace {{.nameSpace}} uninstall {{.chartName}}
    silent: true
  

  namespaceCreate:
    desc: create the namespace {{.nameSpace}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1 
        kind: Namespace 
        metadata: 
          name: {{.nameSpace}}
          labels: 
            name: {{.nameSpace}}
            tier: {{.labelTier}}
        EOF
    silent: true


  namespaceDelete:
    desc: delete the namespace {{.nameSpace}}
    cmds:
      - |
        kubectl delete namespace {{.nameSpace}}
    silent: true


  repoAdd:
    desc: add the repository
    cmds:
      - |
        helm repo add \
        {{.chartRepoName}} \
        {{.chartRepoUrl}}
      - |
        helm repo update
    silent: true


  templateDebug:
    desc: "debug template; USAGE: `task templateDebug templateDebugTarget=admin`; DEFAULT: ingress"
    cmds:
      - |
        helm template \
        --namespace {{.nameSpace}} \
        ./CHART/{{.chartName}} \
        --debug \
        -s templates/{{.templateDebugTarget}}.yaml \
        {{.chartVariablesSet}}
    silent: true


###
##
# ** CUSTOM
##
###
  clusterIssuerApply:
    desc: create the certIssuer
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: letsencrypt-prod
        spec:
          acme:
            email: {{.hostAcmeEmail}}
            server: https://acme-v02.api.letsencrypt.org/directory
            privateKeySecretRef:
              name: letsencrypt-prod
            solvers:
            - http01:
                ingress:
                  class: nginx
              selector: {}
        EOF
    silent: true


  crdDelete:
    desc: delete all installed CRDs
    cmds:
      - |
        kubectl delete \
          -f ./cert-manager.crds.yaml
      # - |
      #   kubectl delete crd --selector=app=cert-manager
    silent: true


  crdGet:
    desc: get all installed CRDs 
    cmds:
      - |
        kubectl get crd --selector=app=cert-manager -oname
    silent: true


  crdInstall:
    desc: install the required CDRs
    cmds:
      - |
        kubectl apply \
          -f ./cert-manager.crds.yaml
          #-f https://github.com/jetstack/cert-manager/releases/download/v1.0.0/cert-manager.crds.yaml
    silent: true


  installationTest:
    desc: test the {{.name}} installation
    cmds:
      - |
        echo -e "\n\x1b[33mCreating namespace:\x1b[0m cert-manager-test"
        echo -e "\x1b[33mCreating issuer:\x1b[0m test-selfsigned"
        echo -e "\x1b[33mIssuing cert:\x1b[0m test-selfsigned\n"
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: cert-manager-test
        ---
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: test-selfsigned
          namespace: cert-manager-test
        spec:
          selfSigned: {}
        ---
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: selfsigned-cert
          namespace: cert-manager-test
        spec:
          dnsNames:
            - example.com
          secretName: selfsigned-cert-tls
          issuerRef:
            name: test-selfsigned
        EOF
      - |
        kubectl get certificate -n cert-manager-test -oyaml
      - |
        echo -e "\n\x1b[33mDeleting namespace:\x1b[0m cert-manager-test"
        kubectl delete ns cert-manager-test
    silent: true

