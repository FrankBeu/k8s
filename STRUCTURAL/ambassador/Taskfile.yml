###
##
# * TASKFILE
##  https://taskfile.dev
###
version: '3'

vars:

  name:                     ambassador

  nameSpace:                "{{.name}}"

  domainName:               "{{.name}}.thesym.site"

  chartRepoUrl:             https://www.getambassador.io
  chartRepoName:            datawire
  chartName:                "{{.name}}"
  
  # filter:     "basic-allow"                                                    ### NOT WORKING; NOT implemented yet
  filter:     "basic-auth"
  # filter:     "basic-deny"                                                     ###     WORKING; NOT implemented properly -> redirect to thesym.site
  ### filter:     "ory"                                                          ### NOT WORKING; NOT implemented yet

  labelTier:                edge
  
  hostCertStaging:          ""                                                 ### letsencrypt
  # hostCertStaging:          true                                               ### letsencryptStaging
  hostAcmeEmail:            "fbeutelschiess@gmail.com"

  mappingPort:              80
  mappingServiceName:       "{{.chartName}}"

  portforwardingPortSource: ""
  portforwardingPortTarget: ""

  templateDebugTarget:       "templates/ingress.yaml"

  message:                   Tasks for {{.name}}{{if .chartName}}-helm{{end}}

  # chartSecretsExist:         true
  chartSecretsExist:         false
  chartVariablesSet: |-
    --set service.ports[0].name=http \
    --set service.ports[0].port=80 \
    --set service.ports[0].targetPort=8080 \
    --set service.ports[1].name=https \
    --set service.ports[1].port=443 \
    --set service.ports[1].targetPort=8443 \
    --set service.ports[2].name=ssh \
    --set service.ports[2].port=22 \
    --set service.ports[2].targetPort=8022 \
    #--set service.ports[3].name=test \
    #--set service.ports[3].port=22222 \
    #--set service.ports[3].targetPort=22222 \

tasks:

  taskDebug:
    desc: show all variables in Taskfile
    cmds:
      - |
        echo -e \
        "\n{{range $key, $value := .}} {{$key }}:  \e[92m{{$value}}\e[0m\n {{end}}\n"
    silent: true


  default:
    desc: display info
    cmds:
      - |
        echo -e \
        "\n{{.message}}\n"
      - |
        task -l
    silent: true


###
##
# ** SEQUENCE
##
###
  1:
    desc: ( repoAdd )
    cmds:
      - task: repoAdd
    silent: true


  2:
    desc: ( chartGet )
    cmds:
      - task: chartGet
    silent: true


  3:
    desc: ( namespaceApply )
    cmds:
      - task: namespaceApply
    silent: true


  4:
    desc: ( namespaceHostsApply )
    cmds:
      - task: namespaceHostsApply
    silent: true


  5:
    desc: ( edgectlInstall )
    cmds:
      - task: edgectlInstall
    silent: true


  6:
    desc: ( chartInstall )
    cmds:
      - task: chartInstall
    silent: true


  7:
    desc: ( filterApply )
    cmds:
      - task: filterApply
    silent: true


  8:
    desc: ( filterPolicyApply )
    cmds:
      - task: filterPolicyApply
    silent: true


  9:
    desc: ( hostApply )
    cmds:
      - task: hostApply
    silent: true


  # 10:
  #   desc: ()
  #   cmds:
  #     - task:
  #   silent: true


  # 11:
  #   desc: ()
  #   cmds:
  #     - task:
  #   silent: true


  # 12:
  #   desc: ()
  #   cmds:
  #     - task:
  #   silent: true


###
##
# ** ALPHABETICAL
##
###
  chartDebug:
    desc: debug chart
    cmds:
      - |
        helm install \
        --namespace {{.nameSpace}} \
        --dry-run \
        --debug \
        {{.chartName}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true


  chartGet:
    desc: download the chart
    cmds:
      - |
        helm pull \
        {{.chartRepoName}}/{{.chartName}} \
        -d CHART \
        --untar
    silent: true


  chartInstall:
    desc: install chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        install \
        {{.name}} CHART/{{.chartName}} \
        --namespace {{.nameSpace}} \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartUpdate:
    desc: update chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        upgrade \
        --namespace {{.nameSpace}} \
        {{.name}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartRemove:
    desc: (chartUninstall + namespaceDelete + persistVolumeDelete)
    cmds:
      - task: chartUninstall
      - task: namespaceDelete
    silent: true


  chartUninstall:
    desc: uninstall the {{.name}}-chart
    cmds:
      - |
        helm --namespace {{.nameSpace}} uninstall {{.name}}
    silent: true
  

  hostApply:
    desc: apply Hosts
    cmds:
      - |
        kubectl apply -f host/
    silent: true


  mappingApply:
    desc: apply the mapping for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind: Mapping
        metadata:
          name: {{.name}}
          namespace: {{.nameSpace}}
        spec:
          prefix: /
          #service: {{.name}}-service.{{.nameSpace}}:{{.mappingPort}}
          service: {{.mappingServiceName}}.{{.nameSpace}}:{{.mappingPort}}
          host: {{.domainName}}
        EOF
    silent: true


  namespaceApply:
    desc: apply the namespace {{.nameSpace}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1 
        kind: Namespace 
        metadata: 
          name: {{.nameSpace}}
          labels: 
            name: {{.nameSpace}}
            tier: {{.labelTier}}
        EOF
    silent: true


  namespaceDelete:
    desc: delete the namespace {{.nameSpace}}
    cmds:
      - |
        kubectl delete namespace {{.nameSpace}}
    silent: true


  portforward:
    desc: portforwarding for {{.name}}
    cmds:
      - |
        kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod -o name) {{.portforwardingPortSource}}:{{.portforwardingPortTarget}}
    silent: true


  repoAdd:
    desc: add the repository
    cmds:
      - |
        helm repo add \
        {{.chartRepoName}} \
        {{.chartRepoUrl}}
      - |
        helm repo update
    silent: true


  templateDebug:
    desc: debug template
    cmds:
      - |
        helm template \
        --namespace {{.nameSpace}} \
        {{.chartName}} CHART/{{.chartName}} \
        --debug \
        -s {{.templateDebugTarget}}
    silent: true


###
##
# ** CUSTOM
##
###
  chartUpdate2Edge:
    desc: update chart to edgeStack
    cmds:
      - |
        helm upgrade \
        --namespace {{.chartName}} \
        {{.chartName}} CHART/{{.chartName}} \
    silent: true


  chartUpdate2Gateway:
    desc: update chart to gateway
    cmds:
      - |
        helm upgrade \
        --namespace {{.chartName}} \
        {{.chartName}} CHART/{{.chartName}} \
        --set image.repository=docker.io/datawire/ambassador 
        --set image.tag=1.7.0
        --set enableAES=false
    silent: true


  edgectlInstall:
    desc: get the edgectl-binary
    cmds:
      - |
        sudo curl -fL https://metriton.datawire.io/downloads/linux/edgectl -o ~/PATH/dist/edgectl \
        && sudo chmod a+x ~/PATH/dist/edgectl


  filterApply:
    desc: apply Filters
    cmds:
      - |
        kubectl apply -f filter/
    silent: true


  filterPolicyApply:
    desc: apply FilterPolicies
    cmds:
      - |
        kubectl apply -f filterPolicy/
    silent: true


  filterPolicyDelete:
    desc: make all host and routes available
    cmds:
      - |
        kubectl delete -n {{.nameSpace}} filterpolicy.getambassador.io/basic-filter-policy
    silent: true


  httpsOnly:
    desc: do not allow http for all {{.nameSpace}}-hosts
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind:  Module
        metadata:
          name:  ambassador
          namespace: {{.nameSpace}}
        spec:
          config:
            x_forwarded_proto_redirect: true
            use_remote_address: false
        EOF
    silent: true
     
     
  mappingDefaultApply:
    desc: do not allow http for all {{.nameSpace}}-hosts
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind:  Mapping
        metadata:
          name:  catch-all-mapping
          namespace: {{.nameSpace}}
        spec:
          prefix: /
          service: https://thesym.site
        EOF
    silent: true


  namespaceHostsApply:
    desc: apply the namespace {{.nameSpace}}-hosts
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1 
        kind: Namespace 
        metadata: 
          name: {{.nameSpace}}-hosts
          labels: 
            name: {{.nameSpace}}-hosts
            tier: {{.labelTier}}
        EOF
    silent: true


