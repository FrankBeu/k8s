###
##
# * TASKFILE
##  https://taskfile.dev
###
version: '3'

vars:

  name:                     mattermost

  nameSpace:                "{{.name}}"

  domainName:               "msg.thesym.site"

  chartRepoUrl:             https://helm.mattermost.com
  chartRepoName:            "{{.name}}"
  chartName:                mattermost-team-edition

  # filter:                  "basic-allow"                                       ### NOT WORKING; NOT implemented yet
  filter:                   "basic-auth"
  # filter:                  "basic-deny"                                        ###     WORKING; NOT implemented properly -> redirect to thesym.site
  ### filter:     "ory"                                                          ### NOT WORKING; NOT implemented yet

  labelTier:                communication

  hostCertStaging:          ""                                                 ### letsencrypt
  # hostCertStaging:          true                                               ### letsencryptStaging
  hostAcmeEmail:            "fbeutelschiess@gmail.com"

  mappingPort:              8065
  mappingServiceName:       "{{.chartName}}"

  portforwardingPortSource: 8065
  portforwardingPortTarget: 8065

  pvRelativePathData:       "{{.name}}/data"
  pvRelativePathDb:         "{{.name}}/db"
  pvRelativePathPlugins:    "{{.name}}/plugins"
  pvStorageSizeData:        10Gi
  pvStorageSizeDb:          10Gi
  pvStorageSizePlugins:     1Gi
  # pvStorageSize:            128Mi

  templateDebugTarget:       "secret-config"
  templateDebugOutput:       "stdout"
  # templateDebugOutput:       "dir"

  message:                   Tasks for {{.name}}{{if .chartName}}-helm{{end}}

  chartVariablesSet: |-
    --set persistence.data.existingClaim=mattermost-data \
    --set persistence.plugins.existingClaim=mattermost-plugins \
    --set mysql.persistence.existingClaim=mattermost-db \
    --set configJSON.EmailSettings.SendEmailNotifications=true \
    --set configJSON.ServiceSettings.SiteURL="https://{{.domainName}}" \

tasks:

  taskDebug:
    desc: show all variables in Taskfile
    cmds:
      - |
        echo -e \
        "\n{{range $key, $value := .}} {{$key }}:  \e[92m{{$value}}\e[0m\n {{end}}\n"
    silent: true


  default:
    desc: display info
    cmds:
      - |
        echo -e \
        "\n{{.message}}\n"
      - |
        task -l
    silent: true


###
##
# ** SEQUENCE
##
###
  1:
    desc: ( repoAdd )
    cmds:
      - task: repoAdd
    silent: true


  2:
    desc: ( chartGet )
    cmds:
      - task: chartGet
    silent: true


  3:
    desc: ( namespaceApply )
    cmds:
      - task: namespaceApply
    silent: true


  4:
    desc: ( filterPolicyApply )
    cmds:
      - task: filterPolicyApply
    silent: true


  5:
    desc: ( hostApply )
    cmds:
      - task: hostApply
    silent: true


  6:
    desc: ( mappingApply )
    cmds:
      - task: mappingApply
    silent: true


  7:
    desc: ( persistenceApply )
    cmds:
      - task: persistenceApply
    silent: true


  8:
    desc: ( chartInstall )
    cmds:
      - task: chartInstall
    silent: true


  9:
    desc: ( chartUpdate )
    cmds:
      - task: chartUpdate
    silent: true


  10:
    desc: ( resourcesRemove )
    cmds:
      - task: resourcesRemove
    silent: true


###
##
# ** ALPHABETICAL
##
###
  chartDebug:
    desc: debug chart
    cmds:
      - |
        helm install \
        --namespace {{.nameSpace}} \
        --dry-run \
        --debug \
        {{.name}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true


  chartGet:
    desc: download the chart
    cmds:
      - |
        helm pull \
        {{.chartRepoName}}/{{.chartName}} \
        -d CHART \
        --untar
    silent: true


  chartInstall:
    desc: install chart
    cmds:
      - |
        helm secrets install \
        --namespace {{.nameSpace}} \
        {{.name}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
        -f sec.yaml
    silent: true


  chartUpdate:
    desc: update chart
    cmds:
      - |
        helm secrets upgrade \
        --namespace {{.nameSpace}} \
        {{.name}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
        -f sec.yaml
    silent: true


  chartRemove:
    desc: (chartUninstall + namespaceDelete + persistentVolumeDelete)
    cmds:
      - task: chartUninstall
      - task: namespaceDelete
      - task: persistentVolumeDelete
    silent: true


  chartUninstall:
    desc: uninstall the {{.name}}-chart
    cmds:
      - |
        helm --namespace {{.nameSpace}} uninstall {{.name}}
    silent: true


  filterPolicyApply:
    desc: create the host for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind: FilterPolicy
        metadata:
          name: {{.name}}
          namespace: {{.nameSpace}}
        spec:
          rules:
          - host: {{.domainName}}
            path: "*"
            filters:
            #- name: {{.filter}}
            - name: {{if eq .filter "basic-allow"}}"basic-auth"{{else}}{{.filter}}{{end}}
              namespace: "ambassador"
              {{- if eq .filter "basic-allow"}}
              onDeny:  "continue"
              onAllow: "continue"
              {{- end}}
        EOF
    silent: true


  hostApply:
    desc: apply the host for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind: Host
        metadata:
          name: {{.name}}
          namespace: ambassador-hosts
        spec:
          hostname: {{.domainName}}
          acmeProvider:
            {{- if .hostCertStaging }}
            authority: https://acme-staging-v02.api.letsencrypt.org/directory
            {{- else}}
            authority: https://acme-v02.api.letsencrypt.org/directory
            {{- end}}
            email: {{.hostAcmeEmail}}
            privateKeySecret:
              name: {{.name}}-secret
          requestPolicy:
            insecure:
              action: Redirect
        EOF
    silent: true


  mappingApply:
    desc: apply the mapping for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind: Mapping
        metadata:
          name: {{.name}}
          namespace: {{.nameSpace}}
        spec:
          prefix: /
          #service: {{.name}}-service.{{.nameSpace}}:{{.mappingPort}}
          service: {{.mappingServiceName}}.{{.nameSpace}}:{{.mappingPort}}
          host: {{.domainName}}
          allow_upgrade:
            - websocket
        EOF
    silent: true


  namespaceApply:
    desc: apply the namespace {{.nameSpace}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{.nameSpace}}
          labels:
            name: {{.nameSpace}}
            tier: {{.labelTier}}
        EOF
    silent: true


  namespaceDelete:
    desc: delete the namespace {{.nameSpace}}
    cmds:
      - |
        kubectl delete namespace {{.nameSpace}}
    silent: true


  portforward:
    desc: portforwarding for {{.name}}
    cmds:
      - |
        kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod -l app.kubernetes.io/name={{.name}} -o name) {{.portforwardingPortSource}}:{{.portforwardingPortTarget}}
    silent: true


  persistenceApply:
    desc: "TODO: apply a persistent volume"
    cmds:

      ### data
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: {{.name}}-data
          labels:
            type: local
        spec:
          storageClassName: manual
          capacity:
            storage: {{.pvStorageSizeData}}
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: "/PERSISTENCE/{{.pvRelativePathData}}"
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: {{.name}}-data
          namespace: {{.nameSpace}}
        spec:
          volumeName: {{.name}}-data
          storageClassName: manual
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{.pvStorageSizeData}}
        EOF

      ### plugins
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: {{.name}}-plugins
          labels:
            type: local
        spec:
          storageClassName: manual
          capacity:
            storage: {{.pvStorageSizePlugins}}
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: "/PERSISTENCE/{{.pvRelativePathPlugins}}"
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: {{.name}}-plugins
          namespace: {{.nameSpace}}
        spec:
          volumeName: {{.name}}-plugins
          storageClassName: manual
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{.pvStorageSizePlugins}}
        EOF

      ### database
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: {{.name}}-db
          labels:
            type: local
        spec:
          storageClassName: manual
          capacity:
            storage: {{.pvStorageSizeDb}}
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: "/PERSISTENCE/{{.pvRelativePathDb}}"
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: {{.name}}-db
          namespace: {{.nameSpace}}
        spec:
          volumeName: {{.name}}-db
          storageClassName: manual
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{.pvStorageSizeDb}}
        EOF
    silent: true


  persistentVolumeDelete:
    desc: delete the persistent volume {{.name}}
    cmds:
      - |
        kubectl delete pv {{.name}}-data
        kubectl delete pv {{.name}}-db
        kubectl delete pv {{.name}}-plugins
    silent: true


  repoAdd:
    desc: add the repository
    cmds:
      - |
        helm repo add \
        {{.chartRepoName}} \
        {{.chartRepoUrl}}
      - |
        helm repo update
    silent: true


  resourcesRemove:
    desc: (namespaceDelete + persistVolumeDelete)
    cmds:
      - task: namespaceDelete
      - task: persistentVolumeDelete
    silent: true


  templateDebug:
    desc: "debug template; USAGE: `task templateDebug templateDebugTarget=admin`; DEFAULT: ingress ::: `task templateDebugOutput=dir`; DEFAULT: stdout"
    cmds:
      - |
        {{- if eq .templateDebugOutput "dir"}}
        mkdir -p DEBUG
        {{end}}
      - |
        helm template \
        --namespace {{.nameSpace}} \
        ./CHART/{{.chartName}} \
        --debug \
        {{- if eq .templateDebugOutput "dir" -}}
        --output-dir DEBUG \
        {{- end}}
        -s templates/{{.templateDebugTarget}}.yaml \
        {{.chartVariablesSet}}
    silent: true


###
##
# ** CUSTOM
##
###
  configDisplay:
    desc: "get /mattermost/config/config.json from container"
    cmds:
      - |
        kubectl exec -it $(kubectl get pod -l app.kubernetes.io/name={{.name}} -o name) -- cat /mattermost/config/config.json | jq -C | less
    silent: true


  secretDebugTemplate:
    desc: "debug secret (template+vars); you have to run `templateDebug templateDebugOutput=dir` first"
    cmds:
      - |
        yq '.data."config.json"' DEBUG/{{.chartName}}/templates/secret-config.yaml| tr -d '"'  |base64 -d | jq -C . | less
    silent: true


  secretDebugCluster:
    desc: "debug secret (cluster); you have to run `templateDebug templateDebugOutput=dir` first"
    cmds:
      - |
        kubectl get -n {{.nameSpace}} $(kubectl get secret --field-selector type=Opaque -l=app!={{.name}}-mysql -o name) -o jsonpath='{.data.config\.json}' | base64 -d | jq -C | less
    silent: true
