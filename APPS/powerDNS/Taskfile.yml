###
##
# * TASKFILE
#   https://taskfile.dev
#
version: '3'


includes:

  # taskfileRepository: ../../Taskfile.yml
  varsGlobal:         ../../TaskfileVariablesGlobal.yml

vars:

  ###
  ##
  # global vars (imported as varsGlobal) will never be overwritten.
  # However, they can only be used after setting an (ignored) value.
  #
  domainGlobal: GLOBAL


  name:                     powerdns

  nameSpace:                "{{.name}}"

  domainName:               "{{.name}}.{{.domainGlobal}}"

  ### chartRepoUrl:         already added by the global Taskfile
  chartRepoName:            "thesym.site"
  chartName:                "{{.name}}"

  # filter:     "basic-allow"                                                    ### NOT WORKING; NOT implemented yet
  filter:     "basic-auth"
  # filter:     "basic-deny"                                                     ###     WORKING; NOT implemented properly -> redirect to thesym.site
  ### filter:     "ory"                                                          ### NOT WORKING; NOT implemented yet

  labelTier:                DNS

  hostCertStaging:          ""                                                 ### letsencrypt
  # hostCertStaging:          true                                               ### letsencryptStaging
  hostAcmeEmail:            "fbeutelschiess@gmail.com"
  hostPrivateKeySecretName: "letsencrypt-fbeutelschiessgmail.com"

  portforwardingPortSource: "8080"
  portforwardingPortTarget: "80"

  templateDebugTarget:       "ingress"

  message:                   Tasks for {{.name}}{{if .chartName}}-helm{{end}}

  chartSecretsExist:         true
  chartVariablesSet: |-
    --set service.type=NodePort \
    --set service.port=22222 \
    --set persistence.existingClaim={{.pvName0}} \
    --set resources.requests.cpu="10m" \
    --set powerdnsadmin.resources.requests.cpu="10m" \
    --set postgresql.resources.requests.cpu="10m" \
    --set powerdnsadmin.host.acmeEmail={{.hostAcmeEmail}} \
    --set powerdnsadmin.host.certStaging={{.hostCertStaging}} \
    --set powerdnsadmin.host.name={{.domainName}} \
    --set powerdnsadmin.host.namespace=ambassador-hosts \
    --set powerdnsadmin.host.privateKeySecretName={{.hostPrivateKeySecretName}} \
    --set powerdnsadmin.filter={{.filter}} \
    --set powerdnsadmin.config.setting.signup_enabled=False \


tasks:

  taskDebug:
    desc: show all variables in Taskfile
    cmds:
      - |
        echo -e \
        "\n{{range $key, $value := .}} {{$key }}:  \e[92m{{$value}}\e[0m\n {{end}}\n"
    silent: true


  default:
    desc: display info
    cmds:
      - |
        echo -e \
        "\n{{.message}}\n"
      - |
        task -l
    silent: true


###
##
# ** SEQUENCE
#
#
  1:
    desc: ( namespaceApply )
    cmds:
      - task: namespaceApply
    silent: true


  2:
    desc: ( chartInstall )
    cmds:
      - task: chartInstall
    silent: true


  3:

    desc: ( adminUpdate )
    cmds:
      - task: adminUpdate
    silent: true


###
##
# ** ALPHABETICAL
#
#
  chartDebug:
    desc: debug chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        install \
        {{.name}} {{.chartRepoName}}/{{.chartName}}/{{.chartName}} \
        --namespace {{.nameSpace}} \
        --dry-run \
        --debug \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartGet:
    desc: download the chart
    cmds:
      - |
        helm pull \
        {{.chartRepoName}}/{{.chartName}}/{{.chartName}} \
        -d CHART \
        --untar
    silent: true


  chartInstall:
    desc: install chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        install \
        {{.name}} {{.chartRepoName}}/{{.chartName}}/{{.chartName}} \
        --namespace {{.nameSpace}} \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartUpdate:
    desc: update chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        upgrade \
        --namespace {{.nameSpace}} \
        {{.name}} {{.chartRepoName}}/{{.chartName}}/{{.chartName}} \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartRemove:
    desc: (chartUninstall + namespaceDelete)
    cmds:
      - task: chartUninstall
      - task: namespaceDelete
      - task: persistentVolumeDelete
    silent: true


  chartUninstall:
    desc: uninstall the {{.name}}-chart
    cmds:
      - |
        helm --namespace {{.nameSpace}} uninstall {{.name}}
    silent: true


  namespaceApply:
    desc: apply the namespace {{.nameSpace}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{.nameSpace}}
          labels:
            name: {{.nameSpace}}
            tier: {{.labelTier}}
        EOF
    silent: true


  namespaceDelete:
    desc: delete the namespace {{.nameSpace}}
    cmds:
      - |
        kubectl delete namespace {{.nameSpace}}
    silent: true


  resourcesRemove:
    desc: (namespaceDelete)
    cmds:
      - task: namespaceDelete
    silent: true


  templateDebug:
    desc: "debug template; USAGE: `task templateDebug templateDebugTarget=admin`; DEFAULT: ingress"
    cmds:
      - |
        helm template \
        --namespace {{.nameSpace}} \
        {{.name}} {{.chartRepoName}}/{{.chartName}}/{{.chartName}} \
        --debug \
        -s templates/{{.templateDebugTarget}}.yaml \
        {{.chartVariablesSet}}
    silent: true


###
##
# ** CUSTOM
#
#
  adminUpdate:
    desc: update the user and config for powerDNS-Admin
    cmds:
      - kubectl delete job powerdnsadmin-db-setup
      - task: chartUpdate
    silent: true


  portforwardAdmin:
    desc: portforwarding for {{.name}}Admin
    cmds:
      - |
        kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod  -n {{.nameSpace}} -l app.kubernetes.io/name={{.name}}admin -o name) {{.portforwardingPortSource}}:{{.portforwardingPortTarget}}
    silent: true


  portforwardDatabase:
    desc: portforwarding for {{.name}}Database
    cmds:
      - |
        kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod  -n {{.nameSpace}} -l app.kubernetes.io/name=postgresql -o name) 5432:5432
    silent: true


  portforwardWebserver:
    desc: portforwarding for {{.name}}Webserver
    cmds:
      - |
        kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod -n {{.nameSpace}} -l app.kubernetes.io/name={{.name}} -o name) 8081:8081
    silent: true
