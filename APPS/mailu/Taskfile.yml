###
##
# * TASKFILE
##  https://taskfile.dev
###
version: '3'

### TODO: remove pv-related tasks if installation is working

vars:

  name:                     mailu

  nameSpace:                "{{.name}}"

  superDomainName:          "thesym.site"
  domainName:               "mail.{{.superDomainName}}"

  
  chartRepoUrl:             https://mailu.github.io/helm-charts/
  chartRepoName:            mailu
  chartName:                mailu

  labelTier:                LABEL_TIER

  
  hostCertStaging:          ""                                                 ### letsencrypt
  # hostCertStaging:          true                                               ### letsencryptStaging
  hostAcmeEmail:            "fbeutelschiess@gmail.com"

  mappingPort:              80
  mappingServiceName:       "{{.chartName}}"

  portforwardingPortSource: ""
  portforwardingPortTarget: ""

  # pvCreate:                 true
  # pvCreate:                 ""
  pvRelativePath:           "{{.name}}"
  # pvStorageSize:            128Mi
  pvStorageSize:            1Gi

  # traefikCertResolver:      LetsEncryptStaging
  # traefikCertResolver:      LetsEncrypt
  # traefikMiddleware:        traefik-basicauth@kubernetescrd


  templateDebugTarget:       "ingress"

  # servicePort:               5432

  message:                   Tasks for {{.name}}{{if .chartName}}-helm{{end}}

  secretKey:                 "1234567812345678123456781234567812345687qwer" ### must contain alpha-numerics - not only numerics

  chartVariablesSet: |- 
    --set certmanager.issuerName=letsencrypt-prod \
    --set database.mysql.database=mailu \
    --set database.mysql.password=chang3 \
    --set database.mysql.rootPassword=chang3m3! \
    --set database.mysql.roundcubeDatabase=roundcube \
    --set database.mysql.roundcubePassword=chang3m3! \
    --set database.mysql.roundcubeUser=roundcube \
    --set database.mysql.user=mailu \
    --set database.roundcubeType=mysql \
    --set database.type=mysql \
    --set domain="{{.superDomainName}}" \
    --set hostnames="{"{{.domainName}}"}" \
    --set initialAccount.domain={{.superDomainName}} \
    --set initialAccount.password={{.secretKey}} \
    --set initialAccount.username=mailadmin \
    --set persistence.hostPath=/PERSISTENCE/{{.pvRelativePath}} \
    --set persistence.size={{.pvStorageSize}} \
    --set persistence.storageClass=manual \
    --set secretKey={{.secretKey}} \
    --set front.resources.requests.cpu="10m" \
    --set admin.resources.requests.cpu="10m" \
    --set redis.resources.requests.cpu="10m" \
    --set postfix.resources.requests.cpu="10m" \
    --set dovecot.resources.requests.cpu="10m" \
    --set rspamd.resources.requests.cpu="10m" \
    --set clamav.resources.requests.cpu="10m" \
    --set roundcube.resources.requests.cpu="10m" \
    --set webdav.resources.requests.cpu="10m" \
    --set mysql.resources.requests.cpu="10m" \
    --set ingress.annotations."kubernetes\.io\/ingress\.class"=ambassador \


tasks:

  
  taskDebug:
    desc: show all variables in Taskfile
    cmds:
      - |
        echo -e \
        "\n{{range $key, $value := .}} {{$key }}:  \e[92m{{$value}}\e[0m\n {{end}}\n"
    silent: true


  default:
    desc: display info
    cmds:
      - |
        echo -e \
        "\n{{.message}}\n"
      - |
        task -l
    silent: true


###
##
# ** SEQUENCE
##
###
  1:
    desc: ( repoAdd )
    cmds:
      - task: repoAdd
    silent: true

  2:
    desc: ( chartGet )
    cmds:
      - task: chartGet
    silent: true


  3:
    desc: ( namespaceCreate )
    cmds:
      - task: namespaceCreate
    silent: true


  4:
    desc: ( chartDebug )
    cmds:
      - task: chartDebug
    silent: true


  5:
    desc: ( templateDebug )
    cmds:
      - task: templateDebug
    silent: true


  6:
    desc: ( chartInstall )
    cmds:
      - task: chartInstall
    silent: true


  7:
    desc: ( chartUpdate )
    cmds:
      - task: chartUpdate
    silent: true


  8:
    desc: ( pvcPatch )
    cmds:
      - task: pvcPatch
    silent: true


  9:
    desc: ( certChallengeUtilsCreate )
    cmds:
      - task: certChallengeUtilsCreate
    silent: true


  # 10:
  #   desc: (  )
  #   cmds:
  #     - task: 
  #   silent: true


  # 11:
  #   desc: (  )
  #   cmds:
  #     - task: 
  #   silent: true


  # 12:
  #   desc: (  )
  #   cmds:
  #     - task: 
  #   silent: true


###
##
# ** ALPHABETICAL
##
###
  chartDebug:
    desc: debug chart
    cmds:
      - |
        helm install \
        --namespace {{.nameSpace}} \
        --dry-run \
        --debug \
        {{.chartName}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true

    ##--set hostnames="{itestt}" \

  chartGet:
    desc: download the chart
    cmds:
      - |
        helm pull \
        {{.chartRepoName}}/{{.chartName}} \
        -d CHART \
        --untar
    silent: true


  chartInstall:
    desc: install chart
    cmds:
      - |
        helm install \
        --namespace {{.nameSpace}} \
        {{.chartName}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true


  chartUpdate:
    desc: update chart
    cmds:
      - |
        helm upgrade \
        --namespace {{.nameSpace}} \
        {{.chartName}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
    silent: true


  chartRemove:
    desc: (chartUninstall + namespaceDelete + persistentVolumeDelete)
    cmds:
      - task: chartUninstall
      - task: namespaceDelete
      - task: persistentVolumeDelete
    silent: true


  chartUninstall:
    desc: uninstall the {{.chartName}}-chart
    cmds:
      - |
        helm uninstall {{.chartName}}
    silent: true
  

  configMapCreate:
    desc: create the configMap for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: {{.name}}-config
          namespace: {{.nameSpace}}
          labels:
            app: {{.name}}
        data: {{ .configMapData | nindent 2}}
        EOF
    silent: true


  deploymentCreate:
    desc: create the deployment for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: {{.name}}
          namespace: {{.nameSpace}}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: {{.name}}
          template:
            metadata:
              labels:
                app: {{.name}}
            spec:
              containers:
                - name: {{.name}}
                  image: postgres:10.4
                  imagePullPolicy: "IfNotPresent"
                  ports:
                    - containerPort: 5432
                  envFrom:
                    - configMapRef:
                        name: {{.name}}-config
                  volumeMounts:
                    - mountPath: /var/lib/postgresql/data
                      name: {{.name}}db
              volumes:
                - name: {{.name}}db
                  persistentVolumeClaim:
                    claimName: {{.name}}-pv-claim
        EOF
    silent: true


  mappingCreate:
    desc: create the mapping for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind: Mapping
        metadata:
          name: {{.name}}-mapping
          namespace: {{.nameSpace}}
        spec:
          prefix: /
          #service: {{.name}}-service.{{.nameSpace}}:{{.mappingPort}}
          service: {{.mappingServiceName}}.{{.nameSpace}}:{{.mappingPort}}
          host: {{.domainName}}
        EOF
    silent: true


  namespaceCreate:
    desc: create the namespace {{.nameSpace}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1 
        kind: Namespace 
        metadata: 
          name: {{.nameSpace}}
          labels: 
            name: {{.nameSpace}}
            tier: {{.labelTier}}
        EOF
    silent: true


  namespaceDelete:
    desc: delete the namespace {{.nameSpace}}
    cmds:
      - |
        kubectl delete namespace {{.nameSpace}}
    silent: true


  portforward:
    desc: portforwarding for {{.name}}
    cmds:
      - |
        kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod -o name) {{.portforwardingPortSource}}:{{.portforwardingPortTarget}}
    silent: true


  persistenceCreate:
    desc: "TODO: create a persistent volume"
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: {{.name}}-pv
          labels:
            type: local
        spec:
          storageClassName: manual
          capacity:
            storage: {{.pvStorageSize}}
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: "/PERSISTENCE/{{.pvRelativePath}}"
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: {{.name}}-pv-claim
          namespace: {{.nameSpace}}
        spec:
          storageClassName: manual
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{.pvStorageSize}}
        EOF
    silent: true


  persistentVolumeDelete:
    desc: delete the persistent volume {{.name}}-pv
    cmds:
      - |
        kubectl delete pv {{.name}}-pv
    silent: true


  repoAdd:
    desc: add the repository
    cmds:
      - |
        helm repo add \
        {{.chartRepoName}} \
        {{.chartRepoUrl}}
      - |
        helm repo update
    silent: true


  resourcesRemove:
    desc: (namespaceDelete + persistVolumeDelete)
    cmds:
      - task: namespaceDelete
      - task: persistentVolumeDelete
    silent: true


  serviceCreate:
    desc: create the service for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: {{.name}}
          namespace: {{.nameSpace}}
          labels:
            app: {{.name}}
        spec:
          type: NodePort
          ports:
           - port: {{.servicePort}}
          selector:
            app: {{.name}}
        EOF
    silent: true
  hostCreate:
    desc: create the host for {{.name}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: getambassador.io/v2
        kind: Host
        metadata:
          name: {{.name}}-host
          # namespace: {{.nameSpace}}
          namespace: ambassador-hosts
        spec:
          hostname: {{.domainName}}
          acmeProvider:
            authority: >-
              {{if .hostCertStaging}} https://acme-staging-v02.api.letsencrypt.org/directory
              {{else}} https://acme-v02.api.letsencrypt.org/directory
              {{end}}
            email: {{.hostAcmeEmail}}
            privateKeySecret:
              name: {{.name}}-secret
          requestPolicy:
            insecure:
              action: Redirect
        EOF
    silent: true


  templateDebug:
    desc: "debug template; USAGE: `task templateDebug templateDebugTarget=admin`; DEFAULT: ingress"
    cmds:
      - |
        helm template \
        --namespace {{.nameSpace}} \
        ./CHART/{{.chartName}} \
        --debug \
        -s templates/{{.templateDebugTarget}}.yaml \
        {{.chartVariablesSet}}
    silent: true


###
##
# ** CUSTOM
##
###
  certChallengeUtilsCreate:
    desc: "for certificate-issuing-purposes create a redirection service"
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        ---
        apiVersion: getambassador.io/v2
        kind: Mapping
        metadata:
          name: acme-challenge
          namespace: {{.nameSpace}}
        spec:
          prefix: /.well-known/acme-challenge/
          rewrite: ""
          service: acme-challenge-service
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: acme-challenge
          namespace: {{.nameSpace}}
        spec:
          ports:
          - port: 80
            targetPort: 8089
          selector:
            acme.cert-manager.io/http01-solver: "true"
        EOF
    silent: true


  certChallengeUtilsDelete:
    desc: "delete the redirection resources"
    cmds:
      - |
        kubectl delete -n {{.nameSpace}} service acme-challenge
        kubectl delete -n {{.nameSpace}} mapping acme-challenge
    silent: true


  pvcPatch:
    desc: "fix storageClassName on pvc"
    cmds:
      - |
        kubectl patch -n mailu persistentvolumeclaim/mailu-storage
          --type=merge \
          --patch '{"spec":{"storageClassName":manual}}'
    silent: true


