###
##
# * TASKFILE
##  https://taskfile.dev
###
version: '3'

### TODO: remove pv-related tasks if installation is working
includes:

  # taskfileRepository: ../../Taskfile.yml
  varsGlobal:         ../../TaskfileVariablesGlobal.yml

vars:

  ###
  ##
  # global vars (imported as varsGlobal) will never be overwritten.
  # However, they can only be used after setting an (ignored) value.
  #
  domainGlobal: GLOBAL


  name:                     mailu

  nameSpace:                "{{.name}}"

  superDomainName:          "{{.domainGlobal}}"
  domainName:               "{{.name}}.{{.domainGlobal}}"

  chartRepoUrl:             https://mailu.github.io/helm-charts/
  chartRepoName:            "{{.name}}"
  chartName:                "{{.name}}"

  # filter:                   "basic-allow"                   ### NOT WORKING; NOT implemented yet
  filter:                   "basic-auth"
  # filter:                   "basic-deny"                    ###     WORKING; NOT implemented properly -> redirect to thesym.site
  ### filter:                 "ory"                           ### NOT WORKING; NOT implemented yet

  labelTier:                mail

  
  hostCertStaging:          ""                                                 ### letsencrypt
  # hostCertStaging:          true                                               ### letsencryptStaging
  hostAcmeEmail:            "fbeutelschiess@gmail.com"
  hostPrivateKeySecretName: "letsencrypt-fbeutelschiessgmail.com"

  mappingPort:              80
  mappingServiceName:       "{{.name}}"

  portforwardingPortSource: ""
  portforwardingPortTarget: ""

  pvName0:                  "{{.name}}"
  pvRelativePath0:          "{{.name}}"
  pvStorageSize0:           1Gi
  pvStorageClass0:          local-path

  templateDebugTarget:       "ingress"

  # servicePort:               5432

  message:                   Tasks for {{.name}}{{if .chartName}}-helm{{end}}

  chartSecretsExist:         true
  # chartSecretsExist:         false
  chartVariablesSet: |- 
    --set certmanager.issuerName=letsencrypt-prod \
    --set database.mysql.database=mailu \
    --set database.mysql.roundcubeDatabase=roundcube \
    --set database.roundcubeType=mysql \
    --set database.type=mysql \
    --set domain="{{.superDomainName}}" \
    --set hostnames="{"{{.domainName}}"}" \
    --set persistence.hostPath=/PERSISTENCE/{{.pvRelativePath0}} \
    --set persistence.size={{.pvStorageSize0}} \
    --set persistence.storageClass={{.pvStorageClass0}} \
    --set front.resources.requests.cpu="10m" \
    --set admin.resources.requests.cpu="10m" \
    --set redis.resources.requests.cpu="10m" \
    --set postfix.resources.requests.cpu="10m" \
    --set dovecot.resources.requests.cpu="10m" \
    --set rspamd.resources.requests.cpu="10m" \
    --set clamav.resources.requests.cpu="10m" \
    --set roundcube.resources.requests.cpu="10m" \
    --set webdav.resources.requests.cpu="10m" \
    --set mysql.resources.requests.cpu="10m" \
    --set ingress.annotations."kubernetes\.io\/ingress\.class"=ambassador \


tasks:

  taskDebug:
    desc: show all variables in Taskfile
    cmds:
      - |
        echo -e \
        "\n{{range $key, $value := .}} {{$key }}:  \e[92m{{$value}}\e[0m\n {{end}}\n"
    silent: true


  default:
    desc: display info
    cmds:
      - |
        echo -e \
        "\n{{.message}}\n"
      - |
        task -l
    silent: true


###
##
# ** SEQUENCE
#
#
  1:
    desc: ( repoAdd )
    cmds:
      - task: repoAdd
    silent: true


  2:
    desc: ( chartGet )
    cmds:
      - task: chartGet
    silent: true


  3:
    desc: ( namespaceApply )
    cmds:
      - task: namespaceApply
    silent: true


  4:
    desc: ( chartInstall )
    cmds:
      - task: chartInstall
    silent: true


  5:
    desc: ( chartUpdate )
    cmds:
      - task: chartUpdate
    silent: true


  6:
    desc: ( pvcPatch )
    cmds:
      - task: pvcPatch
    silent: true


  7:
    desc: ( certChallengeUtilsCreate )
    cmds:
      - task: certChallengeUtilsCreate
    silent: true


  8:
    desc: ( certChallengeUtilsDelete )
    cmds:
      - task: certChallengeUtilsDelete
    silent: true


###
##
# ** ALPHABETICAL
##
###
  chartDebug:
    desc: debug chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        install \
        {{.name}} CHART/{{.chartName}} \
        --namespace {{.nameSpace}} \
        --dry-run \
        --debug \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartGet:
    desc: download the chart
    cmds:
      - |
        helm pull \
        {{.chartRepoName}}/{{.chartName}} \
        -d CHART \
        --untar
    silent: true


  chartInstall:
    desc: install chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        install \
        {{.name}} CHART/{{.chartName}} \
        --namespace {{.nameSpace}} \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartUpdate:
    desc: update chart
    cmds:
      - |
        helm \
        {{- if eq .chartSecretsExist "true"}}
        secrets \
        {{- end}}
        upgrade \
        --namespace {{.nameSpace}} \
        {{.name}} CHART/{{.chartName}} \
        {{.chartVariablesSet}}
        {{- if eq .chartSecretsExist "true"}}
        -f sec.yaml
        {{- end}}
    silent: true


  chartRemove:
    desc: (chartUninstall + namespaceDelete + persistentVolumeDelete)
    cmds:
      - task: chartUninstall
      - task: namespaceDelete
      - task: persistentVolumeDelete
    silent: true


  chartUninstall:
    desc: uninstall the {{.name}}-chart
    cmds:
      - |
        helm --namespace {{.nameSpace}} uninstall {{.name}}
    silent: true


  namespaceApply:
    desc: apply the namespace {{.nameSpace}}
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{.nameSpace}}
          labels:
            name: {{.nameSpace}}
            tier: {{.labelTier}}
        EOF
    silent: true


  namespaceDelete:
    desc: delete the namespace {{.nameSpace}}
    cmds:
      - |
        kubectl delete namespace {{.nameSpace}}
    silent: true


  portforward:
    desc: portforwarding for {{.name}}
    cmds:
      - |
        kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod -o name) {{.portforwardingPortSource}}:{{.portforwardingPortTarget}}
        #kubectl port-forward --namespace {{.nameSpace}} $(kubectl get pod -l app.kubernetes.io/name={{.name}} -o name) {{.portforwardingPortSource}}:{{.portforwardingPortTarget}}
    silent: true


  repoAdd:
    desc: add the repository
    cmds:
      - |
        helm repo add \
        {{.chartRepoName}} \
        {{.chartRepoUrl}}
      - |
        helm repo update
    silent: true


  resourcesRemove:
    desc: (namespaceDelete + persistentVolumeDelete)
    cmds:
      - task: namespaceDelete
      - task: persistentVolumeDelete
    silent: true


  templateDebug:
    desc: "debug template; USAGE: `task templateDebug templateDebugTarget=admin`; DEFAULT: ingress"
    cmds:
      - |
        helm template \
        --namespace {{.nameSpace}} \
        ./CHART/{{.chartName}} \
        --debug \
        -s templates/{{.templateDebugTarget}}.yaml \
        {{.chartVariablesSet}}
    silent: true


###
##
# ** CUSTOM
##
###
  certChallengeUtilsCreate:
    desc: "for certificate-issuing-purposes create a redirection service"
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        ---
        apiVersion: getambassador.io/v2
        kind: Mapping
        metadata:
          name: acme-challenge
          namespace: {{.nameSpace}}
        spec:
          prefix: /.well-known/acme-challenge/
          rewrite: ""
          service: acme-challenge
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: acme-challenge
          namespace: {{.nameSpace}}
        spec:
          ports:
          - port: 80
            targetPort: 8089
          selector:
            acme.cert-manager.io/http01-solver: "true"
        EOF
    silent: true


  certChallengeUtilsDelete:
    desc: "delete the redirection resources"
    cmds:
      - |
        kubectl delete -n {{.nameSpace}} service acme-challenge
        kubectl delete -n {{.nameSpace}} mapping acme-challenge
    silent: true


  pvcPatch:
    desc: "fix storageClassName on pvc"
    cmds:
      - |
        kubectl patch persistentvolume/mailu-storage \
          --type=merge \
          --patch '{"spec":{"storageClassName":"{{.pvStorageClass0}}"}}'
    silent: true
