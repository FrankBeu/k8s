# Default values for openproject-helm-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

domainName: &domainName project.thesym.site

replicaCount: 1

image:
  repository: openproject/community
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "10.6.5"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: LoadBalancer
  port: 8080
  #type: ClusterIP

  #ingress:
  #  enabled: true
  #  path: /
  #  annotations:
  #    # kubernetes.io/ingress.class: nginx
  #    # kubernetes.io/tls-acme: "true"
  #    kubernetes.io/ingress.class: traefik
  #    # traefik.ingress.kubernetes.io/router.middlewares: traefik-basicauth@kubernetescrd
  #    # traefik.ingress.kubernetes.io/router.tls.certresolver: LetsEncryptStaging
  #    traefik.ingress.kubernetes.io/router.tls.certresolver: LetsEncrypt
  #    traefik.ingress.kubernetes.io/router.tls.domains.0.main: *domainName
  #  hosts:
  #    #- *domainName
  #    - host: *domainName
  #    # - host: chart-example.local
  #  tls: []
  #  #  - secretName: chart-example-tls
  #  #    hosts:
  #  #      - chart-example.local
ingress:
  enabled: true
  path: /
  annotations: {}
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.middlewares: traefik-basicauth@kubernetescrd
    # traefik.ingress.kubernetes.io/router.tls.certresolver: LetsEncryptStaging
    traefik.ingress.kubernetes.io/router.tls.certresolver: LetsEncrypt
    traefik.ingress.kubernetes.io/router.tls.domains.0.main: *domainName
    # kubernetes.io/ingress.class: nginx
    # certmanager.k8s.io/issuer:  your-issuer
    # nginx.ingress.kubernetes.io/proxy-body-size: 50m
    # nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    # nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    # nginx.ingress.kubernetes.io/proxy-buffering: "on"
    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   proxy_cache mattermost_cache;
    #   proxy_cache_revalidate on;
    #   proxy_cache_min_uses 2;
    #   proxy_cache_use_stale timeout;
    #   proxy_cache_lock on;
    #### To use the nginx cache you will need to set an http-snippet in the ingress-nginx configmap
    #### http-snippet: |
    ####     proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;
  hosts:
    - host: *domainName
  tls:
    # - secretName: mattermost.example.com-tls
    #   hosts:
    #     - mattermost.example.com

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 48Gi

postgresql:
  persistence:
    enabled: true
    size: 15G
  postgresqlPassword: superSecrectPassword
  postgresqlDatabase: openproject
